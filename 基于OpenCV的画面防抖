import cv2
import numpy as np


def get_grayscale(frame):
    return cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)


def get_features(gray_frame, prev_gray_frame):
    # 使用 Shi-Tomasi 角点检测器
    feature_params = dict(maxCorners=100,
                          qualityLevel=0.3,
                          minDistance=7,
                          blockSize=7)
    p0 = cv2.goodFeaturesToTrack(prev_gray_frame, mask=None, **feature_params)
    return p0


def track_features(frame, gray_frame, p0, lk_params):
    # 使用 Lucas-Kanade 光流法跟踪特征点
    p1, st, err = cv2.calcOpticalFlowPyrLK(prevImg=gray_frame, nextImg=frame, prevPts=p0, nextPts=None, **lk_params)
    good_new = p1[st == 1]
    good_old = p0[st == 1]
    return good_new, good_old


def compute_transform(good_new, good_old):
    # 计算仿射变换矩阵
    if len(good_new) > 4:
        M, _ = cv2.findHomography(good_old, good_new, cv2.RANSAC, 5.0)
        dx = M[0, 2]
        dy = M[1, 2]
        da = 0
        return M, dx, dy, da
    return None, 0, 0, 0


def stabilize_video(video_path, output_path):
    cap = cv2.VideoCapture(video_path)
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = cap.get(cv2.CAP_PROP_FPS)

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

    ret, prev_frame = cap.read()
    if not ret:
        print("Failed to read video.")
        return

    prev_gray = get_grayscale(prev_frame)
    lk_params = dict(winSize=(15, 15),
                     maxLevel=2,
                     criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

    total_dx, total_dy = 0, 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        gray = get_grayscale(frame)
        p0 = get_features(gray, prev_gray)

        if p0 is not None and len(p0) > 0:
            good_new, good_old = track_features(gray, prev_gray, p0, lk_params)

            M, dx, dy, da = compute_transform(good_new, good_old)
            if M is not None:
                total_dx += dx
                total_dy += dy

                frame_stabilized = cv2.warpAffine(frame, M, (width, height))

                # 平滑过渡
                smooth_T = np.zeros_like(M)
                smooth_T[0, 0] = 1
                smooth_T[1, 1] = 1
                smooth_T[0, 2] = -total_dx / 10
                smooth_T[1, 2] = -total_dy / 10

                frame_stabilized_smoothed = cv2.warpAffine(frame, smooth_T, (width, height))
                out.write(frame_stabilized_smoothed)

        prev_gray = gray.copy()

    cap.release()
    out.release()
    print(f"Stabilized video saved to {output_path}")


# 示例：稳定视频
video_path = 'example_video.mp4'
output_path = 'stabilized_video.mp4'
stabilize_video(video_path, output_path)


